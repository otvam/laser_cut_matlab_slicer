function [is_int, p_c_1, p_c_2] = triangulation_intersect(p_0, n, p_1, p_2, p_3)
%TRIANGULATION_INTERSECT Intersect triangles with a plane.
%   [is_int, p_c_1, p_c_2] = TRIANGULATION_INTERSECT(n, p_0, p_1, p_2, p_3, n_face)
%   p_0 - plane reference point (vector)
%   n - plane normal vector (vector)
%   p_1 - triangle first points (matrix)
%   p_2 - triangle second points (matrix)
%   p_3 - triangle third points (matrix)
%   is_int - if the plane intersect the triangles (vector)
%   p_c_1 - intersection first points (matrix)
%   p_c_2 - intersection second points (matrix)
%
%   See also TRIANGULATION_CREATE, TRIANGULATION_2D_TO_3D, TRIANGULATION_CONTOUR.

%   Thomas Guillod.
%   2019 - BSD License.

% normalize the normal vector
n = n./norm(n);

% get the direction vectors
d = [...
    (p_1(:,1)-p_0(1)).*n(1)+(p_1(:,2)-p_0(2)).*n(2)+(p_1(:,3)-p_0(3)).*n(3),...
    (p_2(:,1)-p_0(1)).*n(1)+(p_2(:,2)-p_0(2)).*n(2)+(p_2(:,3)-p_0(3)).*n(3),...
    (p_3(:,1)-p_0(1)).*n(1)+(p_3(:,2)-p_0(2)).*n(2)+(p_3(:,3)-p_0(3)).*n(3),...
    ];

% switch for cases a, b, and c
s = d<0;

% case a
idx_a = (s(:,2)~=s(:,1))&(s(:,1)~=s(:,3));
p_c_1_a = [...
    (d(:,2).*p_1(:,1)-d(:,1).*p_2(:,1))./(d(:,2)-d(:,1)),...
    (d(:,2).*p_1(:,2)-d(:,1).*p_2(:,2))./(d(:,2)-d(:,1)),...
    (d(:,2).*p_1(:,3)-d(:,1).*p_2(:,3))./(d(:,2)-d(:,1)),...
    ];

p_c_2_a = [...
    (d(:,1).*p_3(1)-d(:,3).*p_1(1))./(d(:,1)-d(:,3)),...
    (d(:,1).*p_3(2)-d(:,3).*p_1(2))./(d(:,1)-d(:,3)),...
    (d(:,1).*p_3(3)-d(:,3).*p_1(3))./(d(:,1)-d(:,3)),...
    ];

% case b
idx_b = (s(:,2)~=s(:,1))&(s(:,1)==s(:,3));
p_c_1_b = [...
    (d(:,2).*p_1(:,1)-d(:,1).*p_2(:,1))./(d(:,2)-d(:,1)),...
    (d(:,2).*p_1(:,2)-d(:,1).*p_2(:,2))./(d(:,2)-d(:,1)),...
    (d(:,2).*p_1(:,3)-d(:,1).*p_2(:,3))./(d(:,2)-d(:,1)),...
    ];
p_c_2_b = [...
    (d(:,2).*p_3(:,1)-d(:,3).*p_2(:,1))./(d(:,2)-d(:,3)),...
    (d(:,2).*p_3(:,2)-d(:,3).*p_2(:,2))./(d(:,2)-d(:,3)),...
    (d(:,2).*p_3(:,3)-d(:,3).*p_2(:,3))./(d(:,2)-d(:,3)),...
    ];

% case c
idx_c = s(:,3)~=s(:,1);
p_c_1_c = [...
    (d(:,3).*p_1(:,1)-d(:,1).*p_3(:,1))./(d(:,3)-d(:,1)),...
    (d(:,3).*p_1(:,2)-d(:,1).*p_3(:,2))./(d(:,3)-d(:,1)),...
    (d(:,3).*p_1(:,3)-d(:,1).*p_3(:,3))./(d(:,3)-d(:,1)),...
    ];
p_c_2_c = [...
    (d(:,2).*p_3(:,1)-d(:,3).*p_2(:,1))./(d(:,2)-d(:,3)),...
    (d(:,2).*p_3(:,2)-d(:,3).*p_2(:,2))./(d(:,2)-d(:,3)),...
    (d(:,2).*p_3(:,3)-d(:,3).*p_2(:,3))./(d(:,2)-d(:,3)),...
    ];

% init
n_faces = size([p_1 p_2 p_3], 1);
p_c_1 = NaN(n_faces, 3);
p_c_2 = NaN(n_faces, 3);
is_int = false(n_faces, 1);

% assign
p_c_1(idx_a, :) = p_c_1_a(idx_a, :);
p_c_2(idx_a, :) = p_c_2_a(idx_a, :);
is_int(idx_a) =true;

p_c_1(idx_b, :) = p_c_1_b(idx_b, :);
p_c_2(idx_b, :) = p_c_2_b(idx_b, :);
is_int(idx_b) =true;

p_c_1(idx_c, :) = p_c_1_c(idx_c, :);
p_c_2(idx_c, :) = p_c_2_c(idx_c, :);
is_int(idx_c) =true;

end